// –ü—Ä–æ—Å—Ç–∞—è –∫–æ—Ä–∑–∏–Ω–∞ –Ω–∞ localStorage - –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –∏–∑ localStorage
function getCart() {
    const cart = localStorage.getItem('cart');
    return cart ? JSON.parse(cart) : [];
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –≤ localStorage
function saveCart(cart) {
    localStorage.setItem('cart', JSON.stringify(cart));
}

// –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
async function addToCart(productId) {
    console.log('üõí –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä ID:', productId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const userStr = localStorage.getItem('currentUser');
    if (!userStr) {
        showNotification('–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É', 'warning');
        return;
    }
    
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ API
        const response = await fetch('/api/products');
        const products = await response.json();
        
        // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä
        const product = products.find(p => p.id === productId);
        if (!product) {
            showNotification('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        let cart = getCart();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        const existingItem = cart.find(item => item.productId === productId);
        
        if (existingItem) {
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            existingItem.quantity += 1;
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
            cart.push({
                productId: productId,
                quantity: 1
            });
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
        saveCart(cart);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        updateCartCount();
        updateCartModal();
        
        showNotification(`${product.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É`, 'success');
        console.log('‚úì –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞', 'error');
    }
}

// –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
function removeFromCart(productId) {
    console.log('üõí –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä ID:', productId);
    
    let cart = getCart();
    cart = cart.filter(item => item.productId !== productId);
    
    saveCart(cart);
    updateCartCount();
    updateCartModal();
    
    showNotification('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', 'info');
    console.log('‚úì –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã');
}

// –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
function updateQuantity(productId, newQuantity) {
    console.log('üõí –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ ID:', productId, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:', newQuantity);
    
    if (newQuantity <= 0) {
        removeFromCart(productId);
        return;
    }
    
    let cart = getCart();
    const item = cart.find(item => item.productId === productId);
    
    if (item) {
        item.quantity = newQuantity;
        saveCart(cart);
        updateCartCount();
        updateCartModal();
        console.log('‚úì –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
    }
}

// –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
function clearCart() {
    console.log('üõí –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É');
    
    localStorage.removeItem('cart');
    updateCartCount();
    updateCartModal();
    
    showNotification('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞', 'info');
    console.log('‚úì –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞');
}

// –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∫–æ—Ä–∑–∏–Ω—ã
function updateCartCount() {
    const cart = getCart();
    const totalItems = cart.reduce((total, item) => total + item.quantity, 0);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫–µ –∫–æ—Ä–∑–∏–Ω—ã
    const cartCounter = document.querySelector('.cart-count');
    if (cartCounter) {
        cartCounter.textContent = totalItems;
        cartCounter.style.display = totalItems > 0 ? 'inline-block' : 'none';
    }
}

// –û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫–æ—Ä–∑–∏–Ω—ã
async function updateCartModal() {
    const cart = getCart();
    const cartModalBody = document.getElementById('cart-modal-body');
    
    if (!cartModalBody) {
        console.log('–≠–ª–µ–º–µ–Ω—Ç cart-modal-body –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    if (cart.length === 0) {
        cartModalBody.innerHTML = `
            <div style="text-align: center; padding: 40px 20px; color: #666;">
                <div style="font-size: 48px; margin-bottom: 16px;">üõí</div>
                <p style="margin: 0; font-size: 16px;">–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>
            </div>
        `;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
        const totalAmount = document.getElementById('cart-total-amount');
        if (totalAmount) {
            totalAmount.textContent = '0 ‚ÇΩ';
        }
        return;
    }
    
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ API
        const response = await fetch('/api/products');
        const products = await response.json();
        
        let totalPrice = 0;
        
        const cartHtml = cart.map(item => {
            const product = products.find(p => p.id === item.productId);
            if (!product) return '';
            
            const itemTotal = product.price * item.quantity;
            totalPrice += itemTotal;
            
            const productImage = product.images && product.images[0] ? product.images[0] : product.image;
            
            return `
                <div style="display: flex; align-items: center; padding: 16px; border-bottom: 1px solid #eee; gap: 12px;">
                    <div style="width: 60px; height: 60px; flex-shrink: 0; background: #f8f9fa; border-radius: 8px; overflow: hidden;">
                        <img src="${productImage}" alt="${product.name}" 
                             style="width: 100%; height: 100%; object-fit: cover; border-radius: 4px;">
                    </div>
                    <div style="flex: 1; min-width: 0;">
                        <h5 style="margin: 0 0 5px 0; font-size: 14px; font-weight: 600;">${product.name}</h5>
                        <div style="color: #666; font-size: 13px; margin-bottom: 8px;">${formatPrice(product.price)} ‚ÇΩ</div>
                        <div style="display: flex; align-items: center; gap: 10px;">
                            <div style="display: flex; align-items: center; gap: 8px; border: 1px solid #ddd; border-radius: 4px; padding: 2px;">
                                <button onclick="updateQuantity(${product.id}, ${item.quantity - 1})" 
                                        style="width: 28px; height: 28px; border: none; background: #f8f9fa; border-radius: 2px; cursor: pointer; display: flex; align-items: center; justify-content: center;">
                                    ‚àí
                                </button>
                                <span style="min-width: 24px; text-align: center; font-weight: 500;">${item.quantity}</span>
                                <button onclick="updateQuantity(${product.id}, ${item.quantity + 1})" 
                                        style="width: 28px; height: 28px; border: none; background: #f8f9fa; border-radius: 2px; cursor: pointer; display: flex; align-items: center; justify-content: center;">
                                    +
                                </button>
                            </div>
                            <button onclick="removeFromCart(${product.id})" 
                                    style="color: #dc3545; background: none; border: none; cursor: pointer; font-size: 16px; padding: 4px;">
                                üóëÔ∏è
                            </button>
                        </div>
                    </div>
                    <div style="font-weight: 600; color: #2d5a2d; margin-left: 10px;">
                        ${formatPrice(itemTotal)} ‚ÇΩ
                    </div>
                </div>
            `;
        }).join('');
        
        cartModalBody.innerHTML = cartHtml;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
        const totalAmount = document.getElementById('cart-total-amount');
        if (totalAmount) {
            totalAmount.textContent = `${formatPrice(totalPrice)} ‚ÇΩ`;
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã:', error);
        cartModalBody.innerHTML = '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã</p>';
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫–æ—Ä–∑–∏–Ω—ã
function showCartModal() {
    console.log('üõí –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É');
    updateCartModal();
    const modal = document.getElementById('cart-modal');
    if (modal) {
        modal.classList.add('show');
        modal.style.display = 'flex';
    }
}

// –°–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫–æ—Ä–∑–∏–Ω—ã
function hideCartModal() {
    console.log('üõí –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É');
    const modal = document.getElementById('cart-modal');
    if (modal) {
        modal.classList.remove('show');
        modal.style.display = 'none';
    }
}

// –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
async function checkout() {
    console.log('üõí –û—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑');
    
    const userStr = localStorage.getItem('currentUser');
    if (!userStr) {
        showNotification('–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞', 'warning');
        return;
    }
    
    const user = JSON.parse(userStr);
    const cart = getCart();
    
    if (cart.length === 0) {
        showNotification('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞', 'warning');
        return;
    }
    
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—É–º–º—ã
        const response = await fetch('/api/products');
        const products = await response.json();
        
        let totalPrice = 0;
        const orderItems = cart.map(item => {
            const product = products.find(p => p.id === item.productId);
            if (product) {
                totalPrice += product.price * item.quantity;
            }
            return {
                productId: item.productId,
                quantity: item.quantity
            };
        });
        
        const orderData = {
            items: orderItems,
            total: totalPrice
        };
        
        const orderResponse = await fetch(`/api/orders/${user.id}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(orderData)
        });
        
        if (!orderResponse.ok) {
            throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }
        
        const result = await orderResponse.json();
        console.log('–ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', result);
        
        // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        clearCart();
        hideCartModal();
        showNotification('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!', 'success');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'error');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä–∑–∏–Ω—ã
function initCart() {
    console.log('üõí –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–π –∫–æ—Ä–∑–∏–Ω—ã –Ω–∞ localStorage');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    updateCartCount();
    updateCartModal();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    const cartBtn = document.getElementById('cart-btn');
    if (cartBtn) {
        cartBtn.addEventListener('click', showCartModal);
        console.log('‚úì –ö–Ω–æ–ø–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    }
    
    const cartModalClose = document.getElementById('cart-modal-close');
    if (cartModalClose) {
        cartModalClose.addEventListener('click', hideCartModal);
        console.log('‚úì –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    }
    
    const clearCartBtn = document.getElementById('clear-cart');
    if (clearCartBtn) {
        clearCartBtn.addEventListener('click', clearCart);
        console.log('‚úì –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    }
    
    const checkoutBtn = document.getElementById('checkout-btn');
    if (checkoutBtn) {
        checkoutBtn.addEventListener('click', checkout);
        console.log('‚úì –ö–Ω–æ–ø–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    }
    
    console.log('‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
}

// Format price function
function formatPrice(price) {
    return price.toLocaleString('ru-RU');
}