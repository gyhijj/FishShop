// Reviews - –ø–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–∑—ã–≤–æ–≤ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ –¥–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤—ã–º –≤—ã–±–æ—Ä–æ–º
let currentReviewType = '';
let selectedProductId = null;
let currentRating = 0;
let allReviews = [];
let filteredReviews = [];
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç–∑—ã–≤–æ–≤
function initReviews() {
    setupReviewTypeSelection();
    setupStarRating();
    setupReviewForm();
    setupFilters();
    setupAuthNotice();
    updateReviewFormDisplay();
    loadProducts();
    loadReviews();
    
    console.log('üåü –°–∏—Å—Ç–µ–º–∞ –æ—Ç–∑—ã–≤–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
}
// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç–∑—ã–≤–∞
function setupReviewTypeSelection() {
    const storeBtn = document.getElementById('store-review-btn');
    const productBtn = document.getElementById('product-review-btn');
    const productSelector = document.getElementById('product-selector');
    const formContainer = document.getElementById('review-form-container');
    const formTitle = document.getElementById('form-title');
    
    if (storeBtn) {
        storeBtn.addEventListener('click', () => {
            selectReviewType('store');
            storeBtn.classList.add('active');
            productBtn.classList.remove('active');
            productSelector.classList.remove('show');
            formContainer.classList.add('show');
            formTitle.textContent = '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –º–∞–≥–∞–∑–∏–Ω–µ';
            selectedProductId = null;
        });
    }
    
    if (productBtn) {
        productBtn.addEventListener('click', () => {
            selectReviewType('product');
            productBtn.classList.add('active');
            storeBtn.classList.remove('active');
            productSelector.classList.add('show');
            formTitle.textContent = '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ç–æ–≤–∞—Ä–µ';
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            const categorySelect = document.getElementById('category-select');
            const productSelect = document.getElementById('product-select');
            const productSelectGroup = document.getElementById('product-select-group');
            
            if (categorySelect) categorySelect.value = '';
            if (productSelect) productSelect.innerHTML = '<option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä --</option>';
            if (productSelectGroup) productSelectGroup.style.display = 'none';
            
            selectedProductId = null;
            formContainer.classList.remove('show');
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categorySelect = document.getElementById('category-select');
    const productSelectGroup = document.getElementById('product-select-group');
    const productSelect = document.getElementById('product-select');
    
    if (categorySelect) {
        categorySelect.addEventListener('change', (e) => {
            const categoryId = e.target.value ? parseInt(e.target.value) : null;
            
            if (categoryId) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                productSelectGroup.style.display = 'block';
                loadProductsByCategory(categoryId);
            } else {
                // –°–∫—Ä—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤
                productSelectGroup.style.display = 'none';
                productSelect.innerHTML = '<option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä --</option>';
                selectedProductId = null;
                if (currentReviewType === 'product') {
                    formContainer.classList.remove('show');
                }
            }
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
    if (productSelect) {
        productSelect.addEventListener('change', (e) => {
            selectedProductId = e.target.value ? parseInt(e.target.value) : null;
            if (currentReviewType === 'product') {
                if (selectedProductId) {
                    formContainer.classList.add('show');
                } else {
                    formContainer.classList.remove('show');
                }
            }
        });
    }
}
// –í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ—Ç–∑—ã–≤–∞
function selectReviewType(type) {
    currentReviewType = type;
    console.log('–í—ã–±—Ä–∞–Ω —Ç–∏–ø –æ—Ç–∑—ã–≤–∞:', type);
}
// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–≤–µ–∑–¥–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
function setupStarRating() {
    const stars = document.querySelectorAll('#star-rating .star');
    
    stars.forEach((star, index) => {
        star.addEventListener('mouseenter', () => {
            highlightStars(index + 1);
        });
        
        star.addEventListener('mouseleave', () => {
            highlightStars(currentRating);
        });
        
        star.addEventListener('click', () => {
            setRating(index + 1);
        });
    });
}
// –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∑–≤–µ–∑–¥
function highlightStars(rating) {
    const stars = document.querySelectorAll('#star-rating .star');
    stars.forEach((star, index) => {
        if (index < rating) {
            star.classList.add('active');
        } else {
            star.classList.remove('active');
        }
    });
}
// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
function setRating(rating) {
    currentRating = rating;
    highlightStars(rating);
    console.log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–π—Ç–∏–Ω–≥:', rating);
}
// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function setupAuthNotice() {
    const loginLink = document.getElementById('login-link');
    if (loginLink) {
        loginLink.addEventListener('click', (e) => {
            e.preventDefault();
            document.getElementById('login-option').click();
        });
    }
}
// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function updateReviewFormDisplay() {
    const currentUser = getCurrentUser();
    const authNotice = document.getElementById('auth-notice');
    const reviewForm = document.getElementById('review-form');
    
    if (currentUser) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - —Å–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (authNotice) authNotice.style.display = 'none';
        if (reviewForm) reviewForm.style.opacity = '1';
    } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (authNotice) authNotice.style.display = 'block';
        if (reviewForm) reviewForm.style.opacity = '0.6';
    }
}
// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º—ã –æ—Ç–∑—ã–≤–∞
function setupReviewForm() {
    const reviewForm = document.getElementById('review-form');
    
    if (reviewForm) {
        reviewForm.addEventListener('submit', handleReviewSubmit);
    }
}
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞
async function handleReviewSubmit(e) {
    e.preventDefault();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û
    const currentUser = getCurrentUser();
    if (!currentUser) {
        showNotification('–î–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç', 'warning');
        document.getElementById('login-option').click(); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—Ö–æ–¥–∞
        return;
    }
    
    if (currentRating === 0) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É', 'warning');
        return;
    }
    
    if (!currentReviewType) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–∑—ã–≤–∞', 'warning');
        return;
    }
    
    if (currentReviewType === 'product' && !selectedProductId) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä', 'warning');
        return;
    }
    
    const title = document.getElementById('review-title').value.trim();
    const content = document.getElementById('review-content').value.trim();
    
    if (!title || !content) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'warning');
        return;
    }
    
    try {
        const reviewData = {
            userId: currentUser.id,
            productId: currentReviewType === 'product' ? selectedProductId : null,
            rating: currentRating,
            title: title,
            content: content
        };
        
        console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤:', reviewData);
        
        const response = await fetch('/api/reviews', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(reviewData)
        });
        
        if (response.ok) {
            const result = await response.json();
            showNotification('–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!', 'success');
            
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            document.getElementById('review-form').reset();
            currentRating = 0;
            highlightStars(0);
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–∑—ã–≤—ã
            await loadReviews();
            
        } else {
            const errorData = await response.json();
            showNotification(errorData.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞', 'error');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞', 'error');
    }
}
// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
async function loadProducts() {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categoriesResponse = await fetch('/api/categories');
        const productsResponse = await fetch('/api/products');
        
        if (!categoriesResponse.ok || !productsResponse.ok) return;
        
        const categories = await categoriesResponse.json();
        const products = await productsResponse.json();
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        const categorySelect = document.getElementById('category-select');
        if (categorySelect) {
            categorySelect.innerHTML = '<option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é --</option>';
            categories.forEach(category => {
                const option = document.createElement('option');
                option.value = category.id;
                option.textContent = category.name;
                categorySelect.appendChild(option);
            });
        }
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–ø–∏—Å–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
        const productFilter = document.getElementById('product-filter');
        if (productFilter) {
            productFilter.innerHTML = '<option value="">–í—Å–µ —Ç–æ–≤–∞—Ä—ã</option>';
            products.forEach(product => {
                const option = document.createElement('option');
                option.value = product.id;
                option.textContent = product.name;
                productFilter.appendChild(option);
            });
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
    }
}
// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async function loadProductsByCategory(categoryId) {
    try {
        const response = await fetch('/api/products');
        if (!response.ok) return;
        
        const products = await response.json();
        const categoryProducts = products.filter(product => product.categoryId === categoryId);
        
        const productSelect = document.getElementById('product-select');
        if (productSelect) {
            productSelect.innerHTML = '<option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä --</option>';
            categoryProducts.forEach(product => {
                const option = document.createElement('option');
                option.value = product.id;
                option.textContent = product.name;
                productSelect.appendChild(option);
            });
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
    }
}
// –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
async function loadReviews() {
    try {
        const response = await fetch('/api/reviews');
        if (!response.ok) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤:', response.status);
            return;
        }
        
        allReviews = await response.json();
        filteredReviews = [...allReviews];
        displayReviews();
        
        console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤:', allReviews.length);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤:', error);
    }
}
// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
function setupFilters() {
    const ratingFilter = document.getElementById('rating-filter');
    const typeFilter = document.getElementById('type-filter');
    const productFilter = document.getElementById('product-filter');
    
    [ratingFilter, typeFilter, productFilter].forEach(filter => {
        if (filter) {
            filter.addEventListener('change', applyFilters);
        }
    });
}
// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
function applyFilters() {
    const ratingFilter = document.getElementById('rating-filter');
    const typeFilter = document.getElementById('type-filter');
    const productFilter = document.getElementById('product-filter');
    
    filteredReviews = [...allReviews];
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    if (ratingFilter && ratingFilter.value) {
        const rating = parseInt(ratingFilter.value);
        filteredReviews = filteredReviews.filter(review => review.rating === rating);
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
    if (typeFilter && typeFilter.value) {
        const type = typeFilter.value;
        if (type === 'store') {
            filteredReviews = filteredReviews.filter(review => !review.product_id);
        } else if (type === 'product') {
            filteredReviews = filteredReviews.filter(review => review.product_id);
        }
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–æ–≤–∞—Ä—É
    if (productFilter && productFilter.value) {
        const productId = parseInt(productFilter.value);
        filteredReviews = filteredReviews.filter(review => review.product_id === productId);
    }
    
    displayReviews();
}
// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
function displayReviews() {
    const container = document.getElementById('reviews-container');
    
    if (!container) return;
    
    if (filteredReviews.length === 0) {
        container.innerHTML = `
            <div class="empty-reviews">
                <i class="fas fa-comments"></i>
                <h4>–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤</h4>
                <p>–°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –æ—Å—Ç–∞–≤–∏—Ç –æ—Ç–∑—ã–≤!</p>
            </div>
        `;
        return;
    }
    
    container.innerHTML = filteredReviews.map(review => createReviewCard(review)).join('');
}
// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–∑—ã–≤–∞
function createReviewCard(review) {
    const isStoreReview = !review.product_id;
    const reviewType = isStoreReview ? '–û—Ç–∑—ã–≤ –æ –º–∞–≥–∞–∑–∏–Ω–µ' : `–û—Ç–∑—ã–≤ –æ —Ç–æ–≤–∞—Ä–µ: ${review.product_name || '–¢–æ–≤–∞—Ä'}`;
    
    return `
        <div class="review-card">
            <div class="review-header">
                <div class="review-info">
                    <div class="reviewer-avatar">
                        ${getAuthorInitials(review.author_name)}
                    </div>
                    <div class="reviewer-details">
                        <h4>${review.author_name}</h4>
                        <div class="review-type">${reviewType}</div>
                        <div class="review-date">${formatDate(review.created_at)}</div>
                    </div>
                </div>
                <div class="review-rating">
                    ${generateStars(review.rating)}
                </div>
            </div>
            <div class="review-body">
                <h5>${review.title}</h5>
                <p>${review.content}</p>
            </div>
        </div>
    `;
}
// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–æ–≤ –∞–≤—Ç–æ—Ä–∞
function getAuthorInitials(name) {
    if (!name) return '–ê';
    const words = name.split(' ');
    if (words.length >= 2) {
        return words[0][0] + words[1][0];
    }
    return name[0] || '–ê';
}
// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–≤–µ–∑–¥ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
function generateStars(rating) {
    let stars = '';
    for (let i = 1; i <= 5; i++) {
        if (i <= rating) {
            stars += '<i class="fas fa-star star-filled"></i>';
        } else {
            stars += '<i class="far fa-star star-empty"></i>';
        }
    }
    return stars;
}
// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(dateString) {
    const date = new Date(dateString);
    const options = { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    };
    return date.toLocaleDateString('ru-RU', options);
}
// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getCurrentUser() {
    const userStr = localStorage.getItem('currentUser');
    return userStr ? JSON.parse(userStr) : null;
}
// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
function showNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    let container = document.getElementById('notifications-container');
    if (!container) {
        container = document.createElement('div');
        container.id = 'notifications-container';
        container.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 10000;
            max-width: 400px;
        `;
        document.body.appendChild(container);
    }
    
    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.style.cssText = `
        padding: 15px 20px;
        margin-bottom: 10px;
        border-radius: 8px;
        font-weight: 500;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        transform: translateX(100%);
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 8px;
    `;
    
    let icon, bgColor, textColor;
    switch (type) {
        case 'success':
            icon = '‚úì';
            bgColor = '#d4edda';
            textColor = '#155724';
            break;
        case 'error':
            icon = '‚úï';
            bgColor = '#f8d7da';
            textColor = '#721c24';
            break;
        case 'warning':
            icon = '‚ö†';
            bgColor = '#fff3cd';
            textColor = '#856404';
            break;
        default:
            icon = '‚Ñπ';
            bgColor = '#d1ecf1';
            textColor = '#0c5460';
    }
    
    notification.style.backgroundColor = bgColor;
    notification.style.color = textColor;
    notification.innerHTML = `<span style="font-weight: bold;">${icon}</span> ${message}`;
    
    container.appendChild(notification);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        notification.style.transform = 'translateX(0)';
    }, 100);
    
    // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 4000);
}
// –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
document.addEventListener('userLoggedIn', () => {
    updateReviewFormDisplay();
});
document.addEventListener('userLoggedOut', () => {
    updateReviewFormDisplay();
});
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ç–∑—ã–≤–æ–≤
    if (window.location.pathname.includes('reviews.html')) {
        initReviews();
        
        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ localStorage –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        window.addEventListener('storage', (e) => {
            if (e.key === 'currentUser') {
                setTimeout(() => {
                    updateReviewFormDisplay();
                }, 100);
            }
        });
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        setInterval(() => {
            updateReviewFormDisplay();
        }, 1000);
    }
});
// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
if (typeof window !== 'undefined') {
    window.reviewsSystem = {
        updateAuthDisplay,
        showNotification,
        getCurrentUser
    };
}